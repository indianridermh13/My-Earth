https://github.com/indianridermh13/My-Earth.git
Colors.green 
import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'package:chewie/chewie.dart';

void main() {
  runApp(MyEarth.apk());
}

class MyEarthDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Earth (apk)',
      theme: ThemeData(
        primarySwatch: Colors.green,
        scaffoldBackgroundColor: Colors.white,
      ),
      home: HomeScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;

  final _pages = [
    FeedPage(),
    UploadPlaceholder(),
    SearchPlaceholder(),
    ProfilePage(),
  ];

  void _onTap(int idx) {
    setState(() {
      _selectedIndex = idx;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('My Earth'),
        centerTitle: true,
        elevation: 1,
      ),
      body: _pages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onTap,
        selectedItemColor: Colors.green[800],
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.upload), label: 'Upload'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),
    );
  }
}

class FeedPage extends StatelessWidget {
  final List<Map<String, String>> items = List.generate(6, (i) {
    return {
      'title': 'Sample Short #${i + 1}',
      'thumb': 'assets/thumb1.jpg', // optional
      'video': 'assets/sample_video.mp4',
    };
  });

  @override
  Widget build(BuildContext context) {
    return ListView.separated(
      padding: EdgeInsets.all(12),
      itemCount: items.length,
      separatorBuilder: (_, __) => SizedBox(height: 12),
      itemBuilder: (context, index) {
        final it = items[index];
        return GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (_) => VideoPlayerScreen(
                  title: it['title']!,
                  asset: it['video']!,
                ),
              ),
            );
          },
          child: Card(
            elevation: 2,
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // thumbnail (if exists)
                AspectRatio(
                  aspectRatio: 16 / 9,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[300],
                      borderRadius:
                          BorderRadius.vertical(top: Radius.circular(12)),
                      image: DecorationImage(
                        image: AssetImage('assets/thumb1.jpg'),
                        fit: BoxFit.cover,
                      ),
                    ),
                    child: Align(
                      alignment: Alignment.bottomLeft,
                      child: Padding(
                        padding: EdgeInsets.all(8),
                        child: Container(
                          padding:
                              EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.black45,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            'Play',
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  child: Text(
                    it['title']!,
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                  ),
                ),
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  child: Row(
                    children: [
                      Icon(Icons.thumb_up_alt_outlined, size: 18),
                      SizedBox(width: 6),
                      Text('123'),
                      SizedBox(width: 12),
                      Icon(Icons.comment_outlined, size: 18),
                      SizedBox(width: 6),
                      Text('12'),
                      Spacer(),
                      Icon(Icons.share, size: 18),
                    ],
                  ),
                ),
                SizedBox(height: 8),
              ],
            ),
          ),
        );
      },
    );
  }
}

class VideoPlayerScreen extends StatefulWidget {
  final String title;
  final String asset;
  VideoPlayerScreen({required this.title, required this.asset});

  @override
  State<VideoPlayerScreen> createState() => _VideoPlayerScreenState();
}

class _VideoPlayerScreenState extends State<VideoPlayerScreen> {
  VideoPlayerController? _controller;
  ChewieController? _chewie;

  @override
  void initState() {
    super.initState();
    // Try to load asset video; if not found, use network placeholder.
    _controller = VideoPlayerController.asset(widget.asset)
      ..initialize().then((_) {
        setState(() {
          _chewie = ChewieController(
            videoPlayerController: _controller!,
            autoPlay: true,
            looping: false,
            showControls: true,
          );
        });
      }).catchError((err) {
        // fallback to network sample if asset not available
        _controller = VideoPlayerController.network(
            'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4')
          ..initialize().then((_) {
            setState(() {
              _chewie = ChewieController(
                videoPlayerController: _controller!,
                autoPlay: true,
                looping: false,
                showControls: true,
              );
            });
          });
      });
  }

  @override
  void dispose() {
    _chewie?.dispose();
    _controller?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: _chewie != null
            ? Padding(
                padding: EdgeInsets.all(12),
                child: Chewie(controller: _chewie!),
              )
            : CircularProgressIndicator(),
      ),
    );
  }
}

class UploadPlaceholder extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.cloud_upload_outlined, size: 96, color: Colors.grey),
            SizedBox(height: 12),
            Text('Upload your video', style: TextStyle(fontSize: 18)),
            SizedBox(height: 8),
            Text(
              'This is a placeholder upload screen.\nIn the full app you can trim, add music, captions and publish.',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey[700]),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                final snack = SnackBar(content: Text('Upload flow coming soon'));
                ScaffoldMessenger.of(context).showSnackBar(snack);
              },
              child: Text('Start Upload'),
            )
          ],
        ),
      ),
    );
  }
}

class SearchPlaceholder extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.search, size: 80, color: Colors.grey),
            SizedBox(height: 12),
            Text('Search', style: TextStyle(fontSize: 18)),
            SizedBox(height: 8),
            Text('Search for creators, tags, and videos', textAlign: TextAlign.center),
          ],
        ),
      ),
    );
  }
}

class ProfilePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.all(18),
      child: Column(
        children: [
          CircleAvatar(radius: 42, backgroundColor: Colors.green[200], child: Icon(Icons.person, size: 42)),
          SizedBox(height: 12),
          Text('Creator Name', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
          SizedBox(height: 6),
          Text('0 followers â€¢ 0 following'),
          SizedBox(height: 18),
          ElevatedButton.icon(
            onPressed: () {},
            icon: Icon(Icons.dashboard),
            label: Text('Creator Dashboard'),
            style: ElevatedButton.styleFrom(primary: Colors.green[700]),
          ),
          SizedBox(height: 12),
          ListTile(
            leading: Icon(Icons.settings),
            title: Text('Settings & Privacy'),
            onTap: () {},
          ),
          ListTile(
            leading: Icon(Icons.report),
            title: Text('Report a problem'),
            onTap: () {},
          ),
        ],
      ),
    );
  }
}
